// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Input$ReactHooksTemplate = require("./Input.bs.js");
var Label$ReactHooksTemplate = require("./Label.bs.js");
var Finance$ReactHooksTemplate = require("./Finance.bs.js");

var initialState_002 = /* compoundInterest : array */[];

var initialState = /* record */[
  /* income */"30000",
  /* spending */"10000",
  initialState_002,
  /* currBalance */"0",
  /* retirementAmount */"",
  /* savingsRate */""
];

function updateFormState(state, field, value) {
  switch (field) {
    case 0 : 
        return /* record */[
                /* income */value,
                /* spending */state[/* spending */1],
                /* compoundInterest */state[/* compoundInterest */2],
                /* currBalance */state[/* currBalance */3],
                /* retirementAmount */state[/* retirementAmount */4],
                /* savingsRate */state[/* savingsRate */5]
              ];
    case 1 : 
        return /* record */[
                /* income */state[/* income */0],
                /* spending */state[/* spending */1],
                /* compoundInterest */state[/* compoundInterest */2],
                /* currBalance */value,
                /* retirementAmount */state[/* retirementAmount */4],
                /* savingsRate */state[/* savingsRate */5]
              ];
    case 2 : 
        return /* record */[
                /* income */state[/* income */0],
                /* spending */value,
                /* compoundInterest */state[/* compoundInterest */2],
                /* currBalance */state[/* currBalance */3],
                /* retirementAmount */state[/* retirementAmount */4],
                /* savingsRate */state[/* savingsRate */5]
              ];
    case 3 : 
        return state;
    
  }
}

function reducer(state, action) {
  if (typeof action === "number") {
    if (action !== 0) {
      return /* record */[
              /* income */state[/* income */0],
              /* spending */state[/* spending */1],
              /* compoundInterest */state[/* compoundInterest */2],
              /* currBalance */state[/* currBalance */3],
              /* retirementAmount */state[/* retirementAmount */4],
              /* savingsRate */Finance$ReactHooksTemplate.savingsRate(Caml_format.caml_float_of_string(state[/* income */0]), Caml_format.caml_float_of_string(state[/* spending */1])).toString() + "%"
            ];
    } else {
      return /* record */[
              /* income */state[/* income */0],
              /* spending */state[/* spending */1],
              /* compoundInterest */Finance$ReactHooksTemplate.compoundInterest(7.0, Caml_format.caml_float_of_string(state[/* currBalance */3]), Finance$ReactHooksTemplate.savings(Caml_format.caml_float_of_string(state[/* income */0]), Caml_format.caml_float_of_string(state[/* spending */1])) * 12.0),
              /* currBalance */state[/* currBalance */3],
              /* retirementAmount */(Caml_format.caml_float_of_string(state[/* spending */1]) * 25.0).toString(),
              /* savingsRate */state[/* savingsRate */5]
            ];
    }
  } else {
    return updateFormState(state, action[0], action[1]);
  }
}

function Calc(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var handleChange = function (name, value) {
    return Curry._1(dispatch, /* InputChange */[
                name,
                value
              ]);
  };
  var handleBlur = function (name, e) {
    return Curry._1(dispatch, /* UpdateSavingsRate */1);
  };
  var handleSubmit = function (e) {
    e.preventDefault();
    return Curry._1(dispatch, /* Submit */0);
  };
  return React.createElement("section", {
              className: "container"
            }, React.createElement("form", {
                  className: " section",
                  onSubmit: handleSubmit
                }, React.createElement("h1", {
                      className: "title"
                    }, "FIRE Calculator"), React.createElement(Label$ReactHooksTemplate.make, {
                      children: null
                    }, "Current Balance", React.createElement(Input$ReactHooksTemplate.make, {
                          onChange: handleChange,
                          name: /* CurrentBalance */1,
                          value: state[/* currBalance */3]
                        })), React.createElement(Label$ReactHooksTemplate.make, {
                      children: null
                    }, "Income", React.createElement(Input$ReactHooksTemplate.make, {
                          onChange: handleChange,
                          onBlur: handleBlur,
                          name: /* Income */0,
                          value: state[/* income */0]
                        })), React.createElement(Label$ReactHooksTemplate.make, {
                      children: null
                    }, "Spending", React.createElement(Input$ReactHooksTemplate.make, {
                          onChange: handleChange,
                          onBlur: handleBlur,
                          name: /* Spending */2,
                          value: state[/* spending */1]
                        })), React.createElement(Label$ReactHooksTemplate.make, {
                      children: null
                    }, "Savings rate", React.createElement(Input$ReactHooksTemplate.make, {
                          onChange: handleChange,
                          name: /* SavingsRate */3,
                          value: state[/* savingsRate */5]
                        })), React.createElement("button", {
                      className: "button is-primary"
                    }, "Calculate")), React.createElement("div", {
                  className: "section"
                }, React.createElement("h2", undefined, "Needed for retirement:", state[/* retirementAmount */4], "Achievable in year:"), $$Array.map((function (amount) {
                        if (amount !== undefined) {
                          return React.createElement("h1", undefined, amount.toString());
                        } else {
                          return React.createElement("span", undefined);
                        }
                      }), state[/* compoundInterest */2])));
}

var make = Calc;

exports.initialState = initialState;
exports.updateFormState = updateFormState;
exports.reducer = reducer;
exports.make = make;
/* react Not a pure module */
