// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Input$ReactHooksTemplate = require("./Input.bs.js");
var Label$ReactHooksTemplate = require("./Label.bs.js");
var Finance$ReactHooksTemplate = require("./Finance.bs.js");
var FormattedCurrency$ReactHooksTemplate = require("./FormattedCurrency.bs.js");

var initialState = /* record */[
  /* annualReturn */"7",
  /* income */"30000",
  /* spending */"10000",
  /* compoundInterest : [] */0,
  /* currBalance */"0",
  /* targetAmount */"",
  /* savingsRate */"67%",
  /* targetYear */""
];

function updateFormState(state, field, value) {
  switch (field) {
    case 0 : 
        return /* record */[
                /* annualReturn */value,
                /* income */state[/* income */1],
                /* spending */state[/* spending */2],
                /* compoundInterest */state[/* compoundInterest */3],
                /* currBalance */state[/* currBalance */4],
                /* targetAmount */state[/* targetAmount */5],
                /* savingsRate */state[/* savingsRate */6],
                /* targetYear */state[/* targetYear */7]
              ];
    case 1 : 
        return /* record */[
                /* annualReturn */state[/* annualReturn */0],
                /* income */state[/* income */1],
                /* spending */state[/* spending */2],
                /* compoundInterest */state[/* compoundInterest */3],
                /* currBalance */value,
                /* targetAmount */state[/* targetAmount */5],
                /* savingsRate */state[/* savingsRate */6],
                /* targetYear */state[/* targetYear */7]
              ];
    case 2 : 
        return /* record */[
                /* annualReturn */state[/* annualReturn */0],
                /* income */value,
                /* spending */state[/* spending */2],
                /* compoundInterest */state[/* compoundInterest */3],
                /* currBalance */state[/* currBalance */4],
                /* targetAmount */state[/* targetAmount */5],
                /* savingsRate */state[/* savingsRate */6],
                /* targetYear */state[/* targetYear */7]
              ];
    case 3 : 
        return state;
    case 4 : 
        return /* record */[
                /* annualReturn */state[/* annualReturn */0],
                /* income */state[/* income */1],
                /* spending */value,
                /* compoundInterest */state[/* compoundInterest */3],
                /* currBalance */state[/* currBalance */4],
                /* targetAmount */state[/* targetAmount */5],
                /* savingsRate */state[/* savingsRate */6],
                /* targetYear */state[/* targetYear */7]
              ];
    
  }
}

function reducer(state, action) {
  if (typeof action === "number") {
    if (action !== 0) {
      return /* record */[
              /* annualReturn */state[/* annualReturn */0],
              /* income */state[/* income */1],
              /* spending */state[/* spending */2],
              /* compoundInterest */state[/* compoundInterest */3],
              /* currBalance */state[/* currBalance */4],
              /* targetAmount */state[/* targetAmount */5],
              /* savingsRate */Finance$ReactHooksTemplate.savingsRate(Caml_format.caml_float_of_string(state[/* income */1]), Caml_format.caml_float_of_string(state[/* spending */2])).toString() + "%",
              /* targetYear */state[/* targetYear */7]
            ];
    } else {
      var compoundInterest = Finance$ReactHooksTemplate.compoundInterest(7.0, Caml_format.caml_float_of_string(state[/* currBalance */4]), Finance$ReactHooksTemplate.savings(Caml_format.caml_float_of_string(state[/* income */1]), Caml_format.caml_float_of_string(state[/* spending */2])) * 12.0);
      var targetAmount = Caml_format.caml_float_of_string(state[/* spending */2]) * 12.0 * 25.0;
      var targetYear = Finance$ReactHooksTemplate.getFIREYear(compoundInterest, targetAmount);
      return /* record */[
              /* annualReturn */state[/* annualReturn */0],
              /* income */state[/* income */1],
              /* spending */state[/* spending */2],
              /* compoundInterest */Finance$ReactHooksTemplate.compoundInterest(Caml_format.caml_float_of_string(state[/* annualReturn */0]), Caml_format.caml_float_of_string(state[/* currBalance */4]), Finance$ReactHooksTemplate.savings(Caml_format.caml_float_of_string(state[/* income */1]), Caml_format.caml_float_of_string(state[/* spending */2])) * 12.0),
              /* currBalance */state[/* currBalance */4],
              /* targetAmount */targetAmount.toString(),
              /* savingsRate */state[/* savingsRate */6],
              /* targetYear */targetYear !== undefined ? String(targetYear) : "Not in range"
            ];
    }
  } else {
    return updateFormState(state, action[0], action[1]);
  }
}

function Calc(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var handleChange = function (name, value) {
    return Curry._1(dispatch, /* InputChange */[
                name,
                value
              ]);
  };
  var handleBlur = function (name, e) {
    return Curry._1(dispatch, /* UpdateSavingsRate */1);
  };
  var handleSubmit = function (e) {
    e.preventDefault();
    return Curry._1(dispatch, /* Submit */0);
  };
  return React.createElement("section", {
              className: "container"
            }, React.createElement("form", {
                  className: " section",
                  onSubmit: handleSubmit
                }, React.createElement("h1", {
                      className: "title"
                    }, "FIRE Calculator"), React.createElement(Label$ReactHooksTemplate.make, {
                      children: null
                    }, "Current Balance", React.createElement(Input$ReactHooksTemplate.make, {
                          onChange: handleChange,
                          onBlur: handleBlur,
                          name: /* CurrentBalance */1,
                          value: state[/* currBalance */4]
                        })), React.createElement(Label$ReactHooksTemplate.make, {
                      children: null
                    }, "Income (monthly)", React.createElement(Input$ReactHooksTemplate.make, {
                          onChange: handleChange,
                          onBlur: handleBlur,
                          name: /* Income */2,
                          value: state[/* income */1]
                        })), React.createElement(Label$ReactHooksTemplate.make, {
                      children: null
                    }, "Spending (monthly)", React.createElement(Input$ReactHooksTemplate.make, {
                          onChange: handleChange,
                          onBlur: handleBlur,
                          name: /* Spending */4,
                          value: state[/* spending */2]
                        })), React.createElement(Label$ReactHooksTemplate.make, {
                      children: null
                    }, "Savings rate", React.createElement(Input$ReactHooksTemplate.make, {
                          onChange: handleChange,
                          name: /* SavingsRate */3,
                          value: state[/* savingsRate */6]
                        })), React.createElement(Label$ReactHooksTemplate.make, {
                      children: null
                    }, "Expected annual return (%)", React.createElement(Input$ReactHooksTemplate.make, {
                          onChange: handleChange,
                          onBlur: handleBlur,
                          name: /* AnnualReturn */0,
                          value: state[/* annualReturn */0]
                        })), React.createElement("button", {
                      className: "button is-primary"
                    }, "Calculate")), React.createElement("div", {
                  className: "section"
                }, React.createElement("h2", undefined, "Needed for retirement: ", React.createElement(FormattedCurrency$ReactHooksTemplate.make, {
                          value: state[/* targetAmount */5]
                        }), React.createElement("br", undefined), "Achievable in year: ", state[/* targetYear */7]), $$Array.of_list(Belt_List.mapWithIndex(state[/* compoundInterest */3], (function (index, amount) {
                            return React.createElement("h1", undefined, String(index + 1 | 0), " - ", React.createElement(FormattedCurrency$ReactHooksTemplate.make, {
                                            value: amount
                                          }));
                          })))));
}

var make = Calc;

exports.initialState = initialState;
exports.updateFormState = updateFormState;
exports.reducer = reducer;
exports.make = make;
/* react Not a pure module */
